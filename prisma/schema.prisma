// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id
  deviceId        String?        @map("device_id")
  email           String         @unique
  name            String
  firstName       String?        @map("first_name")
  lastName        String?        @map("last_name")
  password        String
  isActive        Boolean        @default(false) @map("is_active")
  isAdmin         Boolean        @default(false) @map("is_admin")
  lastLoginAt     DateTime?      @map("last_login_at")
  emailVerifiedAt DateTime?      @map("email_verified_at")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  chats           Chat[]
  credit          Credit[]
  teams           TeamUser[]
  accounts        Account[]
  sessions        Session[]
  tokenUsages     TokenUsage[]
  providerAuths   ProviderAuth[]

  @@unique([deviceId, email])
  @@map("users")
}

// Authentication (NextAuth v4)

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// end of NextAuth

model Organisation {
  id        String    @id
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  teams     Team[]

  @@map("organisations")
}

model Team {
  id             String       @id
  organisationId String       @map("organisation_id")
  name           String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  projects       Project[]
  users          TeamUser[]
  assistants     Assistant[]
  collections    Collection[]
  medias         Media[]

  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@map("teams")
}

model TeamUser {
  id        String    @id
  teamId    String    @map("team_id")
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("team_users")
}

model Chat {
  id          String        @id
  userId      String        @map("user_id")
  assistantId String        @map("assistant_id")
  title       String
  messages    ChatMessage[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  user      User      @relation(fields: [userId], references: [id])
  assistant Assistant @relation(fields: [assistantId], references: [id])

  @@map("chats")
}

model ChatMessage {
  id            String                  @id
  chatId        String                  @map("chat_id")
  type          String?
  role          chat_messages_role_enum @map("role")
  content       String                  @db.Text
  visionContent Json?                   @map("vision_content") @db.Json
  tokenCount    Int                     @map("token_count")
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  deletedAt     DateTime?               @map("deleted_at")

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Assistant {
  id                     String         @id
  teamId                 String         @map("team_id")
  llmId                  String         @map("llm_id")
  title                  String
  description            String
  systemPrompt           String         @map("system_prompt") @db.Text
  systemPromptTokenCount Int            @map("system_prompt_token_count")
  isShared               Boolean        @default(false) @map("is_shared")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  deletedAt              DateTime?      @map("deleted_at")
  chats                  Chat[]
  workflowSteps          WorkflowStep[]

  team Team           @relation(fields: [teamId], references: [id])
  llm  LargeLangModel @relation(fields: [llmId], references: [id])

  @@map("assistants")
}

model LargeLangModel {
  id          String       @id
  apiName     String       @map("api_name")
  displayName String       @map("display_name")
  description String
  provider    String
  contextSize Int          @map("context_size")
  maxTokens   Int          @map("max_tokens")
  multiModal  Boolean      @default(false) @map("multi_modal")
  hidden      Boolean      @default(false)
  free        Boolean      @default(false)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  assistants  Assistant[]
  Collection  Collection[]

  @@map("llms")
}

model Credit {
  id        String    @id
  userId    String    @unique @map("user_id")
  amount    Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model TokenUsage {
  id               String    @id
  userId           String    @map("user_id")
  llmProvider      String    @map("llm_provider")
  llmModel         String    @map("llm_model")
  promptTokens     Int       @map("prompt_tokens")
  completionTokens Int       @map("completion_tokens")
  totalTokens      Int       @map("total_tokens")
  cost             Int       @map("cost")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_usages")
}

// model Subscription {
//   id               String    @id @default(uuid())
//   stripeId         String?
//   stripeCustomerId String
//   status           String?
//   stripePriceId    String?
//   trialEndsAt      DateTime?
//   endsAt           DateTime?
//   createdAt        DateTime  @default(now())
//   updatedAt        DateTime  @updatedAt
//   user             User      @relation(fields: [userId], references: [id])
//   userId           String    @unique
//
//   @@map("subscriptions")
// }

enum chat_messages_role_enum {
  user
  assistant
}

// Media

model Media {
  id         String       @id
  name       String
  teamId     String       @map("team_id")
  fileName   String       @map("file_name")
  filePath   String       @map("file_path")
  fileMime   String       @map("file_mime")
  fileSize   Int          @map("file_size")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  deletedAt  DateTime?    @map("deleted_at")
  mediaAbles MediaAbles[]
  records    Record[]

  team Team @relation(fields: [teamId], references: [id])

  @@map("medias")
}

// A polymorphic relationship between Media and other models
// A Media can belong to multiple models
// e.g. A Media might be created by a User, and is also "attached to" a Project and a Document
model MediaAbles {
  id            String    @id
  mediaId       String    @map("media_id")
  mediaAbleType Int       @map("mediaable_type") @db.SmallInt
  mediaAbleId   String    @map("mediaable_id")
  role          String?
  orderColumn   Int?      @map("order_column") @db.SmallInt
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("media_ables")
}

// Vector Embedding Collections
model Collection {
  id              String           @id
  teamId          String           @map("team_id")
  llmId           String?          @map("model_id")
  name            String           @map("name")
  description     String?          @map("description")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  records         Record[]
  collectionAbles CollectionAble[]

  team Team            @relation(fields: [teamId], references: [id])
  llm  LargeLangModel? @relation(fields: [llmId], references: [id])

  @@map("collections")
}

// A CollectionAble is a polymorphic relationship between Collection and other models
// A CollectionAble can belong to multiple models
// e.g. A CollectionAble might be "attached to" an Assistant and a User
model CollectionAble {
  id                 String    @id
  collectionId       String    @map("collection_id")
  collectionAbleType Int       @map("collectionable_type") @db.SmallInt
  collectionAbleId   String    @map("collectionable_id")
  role               String?
  orderColumn        Int?      @map("order_column") @db.SmallInt
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("collection_ables")
}

model Record {
  id           String    @id
  collectionId String    @map("collection_id")
  mediaId      String?   @map("media_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  chunks       Chunk[]

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  media      Media?     @relation(fields: [mediaId], references: [id])

  @@map("records")
}

model Chunk {
  id        String    @id
  recordId  String    @map("record_id")
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  record Record @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@map("chunks")
}

// Project, Documents, Requirements, and Workflows

model Project {
  id          String     @id
  teamId      String     @map("team_id")
  name        String
  description String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  documents   Document[]
  workflows   Workflow[]

  team Team @relation(fields: [teamId], references: [id])

  @@map("projects")
}

model Document {
  id            String         @id
  projectId     String         @map("project_id")
  name          String
  description   String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  documentItems DocumentItem[]
  workflowSteps WorkflowStep[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model DocumentItem {
  id                String             @id
  documentId        String             @map("document_id")
  orderColumn       Int                @map("order_column") @db.SmallInt
  status            Json?
  type              String
  content           String             @db.Text
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  documentItemAbles DocumentItemAble[]

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_items")
}

// A polymorphic relationship between DocumentItem and other models
// A DocumentItem can belong to multiple models
// e.g. A DocumentItem might be "attached to" a User as kind of a workItem
model DocumentItemAble {
  id             String    @id
  documentItemId String    @map("document_item_id")
  modelType      Int       @map("model_type") @db.SmallInt
  modelId        String    @map("model_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  documentItem DocumentItem @relation(fields: [documentItemId], references: [id], onDelete: Cascade)

  @@map("document_item_ables")
}

model Workflow {
  id            String         @id
  projectId     String         @map("project_id")
  name          String
  description   String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  workflowAbles WorkflowAble[]
  steps         WorkflowStep[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

// A polymorphic relationship between Workflow and other models
// A Workflow can belong to multiple models
// e.g. A Workflow might be "attached to" e.g. a JobQueue
model WorkflowAble {
  id         String    @id
  workflowId String    @map("workflow_id")
  modelType  Int       @map("model_type") @db.SmallInt
  modelId    String    @map("model_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_ables")
}

model WorkflowStep {
  id                String             @id
  workflowId        String             @map("workflow_id")
  documentId        String?            @map("document_id")
  assistantId       String?            @map("assistant_id")
  orderColumn       Int                @map("order_column") @db.SmallInt
  name              String
  description       String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  workflowStepAbles WorkflowStepAble[]

  workflow  Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  document  Document?  @relation(fields: [documentId], references: [id])
  assistant Assistant? @relation(fields: [assistantId], references: [id])

  @@map("workflow_steps")
}

// A polymorphic relationship between WorkflowStep and other models
// A WorkflowStep can belong to multiple models
// e.g. A WorkflowStep might be "attached to" e.g. a JobQueue
model WorkflowStepAble {
  id             String    @id
  workflowStepId String    @map("workflow_step_id")
  modelType      Int       @map("model_type") @db.SmallInt
  modelId        String    @map("model_id")
  orderColumn    Int?      @map("order_column") @db.SmallInt
  role           String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  workflowStep WorkflowStep @relation(fields: [workflowStepId], references: [id], onDelete: Cascade)

  @@map("workflow_step_ables")
}

// auth token for google drive, one drive, etc.
model ProviderAuth {
  id                    String    @id
  userId                String    @map("user_id")
  providerName          String    @map("provider_name")
  type                  String
  accountInfo           Json?     @map("account_info")
  accessToken           String    @map("access_token")
  refreshToken          String?   @map("refresh_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("provider_auths")
}
