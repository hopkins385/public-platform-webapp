// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id
  deviceId           String?    @map("device_id")
  email              String     @unique
  name               String
  firstName          String?    @map("first_name")
  lastName           String?    @map("last_name")
  password           String
  isActive           Boolean    @default(false) @map("is_active")
  isAdmin            Boolean    @default(false) @map("is_admin")
  googleRefreshToken String?    @map("google_refresh_token")
  googleAccessToken  String?    @map("google_access_token")
  azureAccountInfo   Json?      @map("azure_account_info") @db.Json
  azureAccessToken   String?    @map("azure_access_token")
  lastLoginAt        DateTime?  @map("last_login_at")
  emailVerifiedAt    DateTime?  @map("email_verified_at")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  deletedAt          DateTime?  @map("deleted_at")
  chats              Chat[]
  credit             Credit[]
  teams              TeamUser[]

  @@map("users")
}

model Organisation {
  id        String    @id
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  teams     Team[]

  @@map("organisations")
}

model Team {
  id             String       @id
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String       @map("organisation_id")
  name           String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  projects       Project[]
  users          TeamUser[]
  assistants     Assistant[]

  @@map("teams")
}

model TeamUser {
  id        String    @id
  team      Team      @relation(fields: [teamId], references: [id])
  teamId    String    @map("team_id")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("team_users")
}

model Chat {
  id          String        @id
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  assistant   Assistant     @relation(fields: [assistantId], references: [id])
  assistantId String        @map("assistant_id")
  title       String
  messages    ChatMessage[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  @@map("chats")
}

model ChatMessage {
  id         String                  @id
  Chat       Chat                    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String                  @map("chat_id")
  role       chat_messages_role_enum @map("role")
  content    String
  tokenCount Int                     @map("token_count")
  createdAt  DateTime                @default(now()) @map("created_at")
  updatedAt  DateTime                @updatedAt @map("updated_at")
  deletedAt  DateTime?               @map("deleted_at")

  @@map("chat_messages")
}

model Assistant {
  id                     String         @id
  team                   Team           @relation(fields: [teamId], references: [id])
  teamId                 String         @map("team_id")
  llm                    LargeLangModel @relation(fields: [llmId], references: [id])
  llmId                  String         @map("llm_id")
  title                  String
  description            String
  systemPrompt           String         @map("system_prompt") @db.Text
  systemPromptTokenCount Int            @map("system_prompt_token_count")
  isShared               Boolean        @default(false) @map("is_shared")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  deletedAt              DateTime?      @map("deleted_at")
  chats                  Chat[]
  workflowSteps          WorkflowStep[]

  @@map("assistants")
}

model LargeLangModel {
  id          String      @id
  apiName     String      @map("api_name")
  displayName String      @map("display_name")
  description String
  provider    String
  contextSize Int         @map("context_size")
  maxTokens   Int         @map("max_tokens")
  multiModal  Boolean     @default(false) @map("multi_modal")
  hidden      Boolean     @default(false)
  free        Boolean     @default(false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")
  assistants  Assistant[]

  @@map("llms")
}

model Credit {
  id        String    @id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique @map("user_id")
  amount    Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("credits")
}

// model Subscription {
//   id               String    @id @default(uuid())
//   stripeId         String?
//   stripeCustomerId String
//   status           String?
//   stripePriceId    String?
//   trialEndsAt      DateTime?
//   endsAt           DateTime?
//   createdAt        DateTime  @default(now())
//   updatedAt        DateTime  @updatedAt
//   user             User      @relation(fields: [userId], references: [id])
//   userId           String    @unique
//
//   @@map("subscriptions")
// }

enum chat_messages_role_enum {
  user
  assistant
}

// Project, Documents, Requirements, and Workflows

model Project {
  id          String     @id
  team        Team       @relation(fields: [teamId], references: [id])
  teamId      String     @map("team_id")
  name        String
  description String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  documents   Document[]
  workflows   Workflow[]

  @@map("projects")
}

model Document {
  id            String         @id
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String         @map("project_id")
  name          String
  description   String?
  fileName      String?        @map("file_name")
  filePath      String?        @map("file_path")
  fileMime      String?        @map("file_mime")
  fileExtension String?        @map("file_extension")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  documentItems DocumentItem[]
  workflowSteps WorkflowStep[]

  @@map("documents")
}

model DocumentItem {
  id                String             @id
  document          Document           @relation(fields: [documentId], references: [id])
  documentId        String             @map("document_id")
  orderColumn       Int                @map("order_column") @db.SmallInt
  status            Json?
  type              String
  content           String             @db.Text
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  documentItemAbles DocumentItemAble[]

  @@map("document_items")
}

model DocumentItemAble {
  id             String       @id
  documentItem   DocumentItem @relation(fields: [documentItemId], references: [id])
  documentItemId String       @map("document_item_id")
  modelType      String       @map("model_type")
  modelId        String       @map("model_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("document_item_ables")
}

model Workflow {
  id            String         @id
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String         @map("project_id")
  name          String
  description   String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  workflowAbles WorkflowAble[]
  steps         WorkflowStep[]

  @@map("workflows")
}

model WorkflowAble {
  id         String    @id
  workflow   Workflow  @relation(fields: [workflowId], references: [id])
  workflowId String    @map("workflow_id")
  modelType  String    @map("model_type")
  modelId    String    @map("model_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("workflow_ables")
}

model WorkflowStep {
  id                String             @id
  workflow          Workflow           @relation(fields: [workflowId], references: [id])
  workflowId        String             @map("workflow_id")
  document          Document?          @relation(fields: [documentId], references: [id])
  documentId        String?            @map("document_id")
  assistant         Assistant?         @relation(fields: [assistantId], references: [id])
  assistantId       String?            @map("assistant_id")
  orderColumn       Int                @map("order_column") @db.SmallInt
  name              String
  description       String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  deletedAt         DateTime?          @map("deleted_at")
  workflowStepAbles WorkflowStepAble[]

  @@map("workflow_steps")
}

model WorkflowStepAble {
  id             String       @id
  workflowStep   WorkflowStep @relation(fields: [workflowStepId], references: [id])
  workflowStepId String       @map("workflow_step_id")
  modelType      String       @map("model_type")
  modelId        String       @map("model_id")
  orderColumn    Int?         @map("order_column") @db.SmallInt
  role           String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")

  @@map("workflow_step_ables")
}
